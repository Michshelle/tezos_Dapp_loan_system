{"version":3,"sources":["Menu.js","App.js","serviceWorker.js","index.js"],"names":["Menu","tokenInstance","userAddress","ledgerInstance","ledgerInfo","setBalance","Tezos","useState","txStatus","setTxStatus","undefined","txHash","setTxHash","debtTokenTransfer","new_owner","start_date","a","burn","methods","op","console","log","status","hash","Error","confirmation","includedInBlock","Infinity","tz","getBalance","newBalance","className","key","onClick","type","id","value","document","getElementById","src","alt","KT_token","App","addr","setTokenInstance","xtzPrice","setXtzPrice","setLedgerInstance","setLedgerInfo","setUserAddress","balance","isOwner","setIsOwner","setContractBalance","tezbridge","window","initWallet","fetch","require","req","json","response","_xtz","Number","request","method","_address","_balance","storage","owner","_contractBalance","c","mint","mintNumber","xtz","price","send","amount","toFixed","useEffect","setProvider","rpc","signer","TezBridgeSigner","contract","at","tokenContract","ledgerContract","ledgerStorage","ledgerInfos","debtor","totalCredit","toNumber","slice","length","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.25f0cc7b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport DateTimePicker from 'react-datetime-picker';\n//const { JSDOM } = require( \"jsdom\" );\n//const { window } = new JSDOM( \"\" );\n//const $ = require( \"jquery\" )( window );\n\nconst upperFirst = str => str[0].toUpperCase() + str.slice(1);\n\nconst mutezToTez = mutez =>\n  Math.round((parseInt(mutez) / 1000000 + Number.EPSILON) * 100) / 100;\n\nconst Menu = ({\n  tokenInstance,\n  ledgerInstance,\n  ledgerInfo,\n  userAddress,\n  setBalance,\n  Tezos\n}) => {\n  const [txStatus, setTxStatus] = useState(null);\n  const [txHash, setTxHash] = useState(undefined);\n\n  const debtTokenTransfer = async (userAddress,new_owner,start_date) => {\n    try {\n\n\n\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n  const burn = async (userAddress) => {\n    try {\n\n      const op = await tokenInstance.methods\n        .burn(userAddress)\n      console.log(op);\n      if (op.status === \"applied\") {\n        setTxStatus(\"applied\");\n        setTxHash(op.hash);\n      } else {\n        setTxStatus(\"error\");\n        throw Error(\"Transation not applied\");\n      }\n\n      await op.confirmation(30);\n      if (op.includedInBlock !== Infinity) {\n        setTxStatus(\"included\");\n        const newBalance = await Tezos.tz.getBalance(userAddress);\n        setBalance(newBalance);\n      } else {\n        throw Error(\"Transation not included in block\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (txStatus === null) {\n\n    return (\n      <>\n        <div className=\"app-subtitle\">Choose the action you want to perform:</div>\n          <div className=\"card coffee_selection\" key={userAddress}>\n              <div className=\"card-footer\">\n                <div className=\"card-footer-item\">\n                  <span\n                    className=\"action\"\n                    onClick={() => burn(userAddress)}\n                  >\n                    Burn\n                  </span>            \n                </div>\n                <div className=\"card-footer-item\">\n                  <p className=\"card-padding-line\">\n                   New creditor: <input type=\"text\" id=\"newCreditorAccount\" value=\"\"></input>\n                  </p>\n                  <p className=\"card-padding-line\">\n                  Date: <DateTimePicker           />\n                  </p>\n                  <span\n                    className=\"action\"\n                    onClick={() => debtTokenTransfer(userAddress,document.getElementById(\"newCreditorAccount\").value)}\n                  >\n                    Transfer\n                    </span>                             \n                </div>\n              </div>\n          </div>\n      </>\n    );\n  } else if (txStatus === \"applied\") {\n    return (\n      <div className=\"message is-info\">\n        <div className=\"message-header\">\n          <p>Waiting for confirmation</p>\n        </div>\n        <div className=\"message-body\">\n          <p>Your transaction is being processed, please wait.</p>\n          <p className=\"coffee-loader\">\n            <img src=\"coffee-cup.png\" alt=\"coffee-cup\" />\n          </p>\n          <p>Transaction number: {txHash}</p>\n        </div>\n      </div>\n    );\n  } else if (txStatus === \"included\") {\n    return (\n      <div className=\"message is-success\">\n        <div className=\"message-header\">\n          <p>Transaction confirmed!</p>\n        </div>\n        <div className=\"message-body\">\n          <p>Xtz has been sent to your account</p>\n          <br />\n          <p>\n            <button\n              className=\"button is-info\"\n              onClick={() => setTxStatus(null)}\n            >\n              Xtz redeem\n            </button>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (txStatus === \"error\") {\n    return (\n      <div className=\"message is-danger\">\n        <div className=\"message-header\">\n          <p>Error</p>\n        </div>\n        <div className=\"message-body\">\n          <p>An error has occurred, please try again.</p>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Menu;\n","import React, { useState, useEffect } from \"react\";\nimport { Tezos } from \"@taquito/taquito\";\nimport { TezBridgeSigner } from \"@taquito/tezbridge-signer\";\nimport Menu from \"./Menu\";\nimport \"./App.css\";\nimport \"./bulma.css\";\n\n\n/* PUT HERE THE CONTRACT ADDRESS FOR YOUR OWN SANDBOX! */\nconst KT_ledger = \"KT1RigSYegqvkCkEoHMfgXY4XLgknZufrFEa\"\nconst KT_token = \"KT1GxBkvP5aiAtBu9MwAWBgxRpaCeLCcBfNj\"\n\n\nconst shortenAddress = addr =>\n  addr.slice(0, 6) + \"...\" + addr.slice(addr.length - 6);\n\n  \nconst App = () => {\n  const [tokenInstance, setTokenInstance] = useState(undefined);\n  const [xtzPrice, setXtzPrice] = useState(undefined);\n  const [ledgerInstance, setLedgerInstance] = useState(undefined);\n  const [ledgerInfo, setLedgerInfo] = useState(undefined);\n  const [userAddress, setUserAddress] = useState(undefined);\n  const [balance, setBalance] = useState(undefined);\n  const [isOwner, setIsOwner] = useState(false);\n  const [contractBalance, setContractBalance] = useState(0);\n  const tezbridge = window.tezbridge;\n\n\n  const initWallet = async () => {\n    try {\n      /*............remove...........*/\n      const fetch = require('node-fetch') \n      const req = await fetch(\"https://api-pub.bitfinex.com/v2/ticker/tXTZUSD\")\n      const response = await req.json()               \n      const _xtz = Number(response[0])\n      setXtzPrice(_xtz);\n      /*.............remove..........*/\n      const _address = await tezbridge.request({ method: \"get_source\" });\n      setUserAddress(_address);\n      // gets user's balance\n      const _balance = await Tezos.tz.getBalance(_address);\n      setBalance(_balance);\n      const storage = await tokenInstance.storage();\n      if (storage.owner === _address) {\n        setIsOwner(true);\n        const _contractBalance = await Tezos.tz.getBalance(KT_token);\n        setContractBalance(_contractBalance.c[0]);\n      }\n    } catch (error) {\n      console.log(\"error fetching the address or balance:\", error);\n    }\n  };\n\n  const mint = async (mintNumber,xtz) => {\n    // sends mint request\n    const price = mintNumber / 1000000 / xtz;\n    const op = await tokenInstance.methods.mint(mintNumber).send({ amount: price.toFixed(4) });\n    // waits for confirmation\n    await op.confirmation(30);\n    // if confirmed\n    if (op.includedInBlock !== Infinity) {\n      const newBalance = await Tezos.tz.getBalance(userAddress);\n      setBalance(newBalance);\n    } else {\n      console.log(\"error\");\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // sets RPC\n      Tezos.setProvider({\n        rpc: \"https://tezos-dev.cryptonomic-infra.tech\",\n        signer: new TezBridgeSigner()\n      });\n      // fetches contract storage\n      const tokenContract = await Tezos.contract.at(KT_token);\n      setTokenInstance(tokenContract);\n      const ledgerContract = await Tezos.contract.at(KT_ledger);\n      setLedgerInstance(ledgerContract);\n      const ledgerStorage = await ledgerContract.storage();\n      // creates token contract info\n      let ledgerInfos = [ledgerStorage.debtor,ledgerStorage.totalCredit];\n      setLedgerInfo(ledgerInfos);\n    })();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div className=\"wallet\">\n        {balance === undefined ? (\n          <button\n            className=\"button is-info is-light is-small\"\n            onClick={initWallet}\n          >\n            Connect your wallet\n          </button>\n        ) : (\n          <>\n            <span className=\"balance\">ꜩ {balance.toNumber() / 1000000}</span>\n            <div className=\"field is-grouped\">\n              <p className=\"control\">\n                <button\n                  className=\"button is-success is-light is-small\"\n                  onClick={async () => {\n                    setUserAddress(undefined);\n                    setBalance(undefined);\n                    setIsOwner(undefined);\n                    setXtzPrice(undefined);\n                    await initWallet();\n                  }}\n                >\n                  {shortenAddress(userAddress)}\n                </button>\n              </p>\n              {isOwner && (\n                <p className=\"control\">\n                  <button\n                    className=\"button is-warning is-light is-small\"\n                    onClick={async () => {\n                     mint(document.getElementById(\"tokenNumber\").value,xtzPrice);\n                     document.getElementById(\"tokenNumber\").value = \"\";\n                    }\n                    }\n                  >\n                    Mint token\n                  </button>\n                  <input type=\"text\" id=\"tokenNumber\"></input>\n                </p>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"app-title\">Flexible Loans</div>\n      <div className=\"logo\">\n        <img src=\"coffee-maker.png\" alt=\"logo\" />\n      </div>\n      {typeof ledgerInfo === 'undefined' ? (\n        \"Loading the ledger info...\"\n      ) : (\n        <Menu\n          ledgerInfo={ledgerInfo}\n          tokenInstance={tokenInstance}\n          ledgerInstance={ledgerInstance}\n          userAddress={userAddress}\n          setBalance={setBalance}\n          Tezos={Tezos}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}