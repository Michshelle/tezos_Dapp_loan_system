{"ast":null,"code":"/* globals fetch, Headers */\n\n/* istanbul ignore next */\nif (!process.browser) {\n  global.fetch = require('node-fetch');\n  global.Headers = global.fetch.Headers;\n}\n\nconst caseless = require('caseless');\n\nconst toTypedArray = require('typedarray-to-buffer');\n\nconst makeHeaders = obj => new Headers(obj);\n\nconst makeBody = value => {\n  // TODO: Streams support.\n  if (typeof value === 'string') {\n    value = Buffer.from(value);\n  }\n  /* Can't test Blob types in Node.js */\n\n  /* istanbul ignore else */\n\n\n  if (Buffer.isBuffer(value)) {\n    value = toTypedArray(value);\n  }\n\n  return value;\n};\n\nclass R2 {\n  constructor(...args) {\n    this.opts = {\n      method: 'GET'\n    };\n    this._headers = {};\n    this._caseless = caseless(this._headers);\n\n    let failSet = () => {\n      throw new Error('Cannot set read-only property.');\n    };\n\n    const resolveResWith = way => resp => resp.clone()[way]();\n    /* formData isn't implemented in the shim yet */\n\n\n    const ways = ['json', 'text', 'arrayBuffer', 'blob', 'formData'];\n    ways.forEach(way => Object.defineProperty(this, way, {\n      get: () => this.response.then(resolveResWith(way)),\n      set: failSet\n    }));\n\n    this._args(...args);\n\n    this.response = Promise.resolve().then(() => this._request());\n  }\n\n  _args(...args) {\n    let opts = this.opts;\n\n    if (typeof args[0] === 'string') {\n      opts.url = args.shift();\n    }\n\n    if (typeof args[0] === 'object') {\n      opts = Object.assign(opts, args.shift());\n    }\n\n    if (opts.headers) this.setHeaders(opts.headers);\n    this.opts = opts;\n  }\n\n  method(verb, ...args) {\n    this.opts.method = verb.toUpperCase();\n\n    this._args(...args);\n\n    return this;\n  }\n\n  _request() {\n    let url = this.opts.url;\n    delete this.opts.url;\n\n    if (this.opts.json) {\n      this.opts.body = JSON.stringify(this.opts.json);\n      this.setHeader('content-type', 'application/json');\n      delete this.opts.json;\n    }\n\n    if (this.opts.body) {\n      this.opts.body = makeBody(this.opts.body);\n    } // TODO: formData API.\n\n\n    this.opts.headers = makeHeaders(this._headers);\n    return fetch(url, this.opts);\n  }\n\n  setHeaders(obj) {\n    for (let key in obj) {\n      this._caseless.set(key, obj[key]);\n    }\n\n    return this;\n  }\n\n  setHeader(key, value) {\n    let o = {};\n    o[key] = value;\n    return this.setHeaders(o);\n  }\n\n}\n\nmodule.exports = (...args) => new R2(...args);\n\nmodule.exports.put = (...args) => new R2().method('put', ...args);\n\nmodule.exports.get = (...args) => new R2().method('get', ...args);\n\nmodule.exports.post = (...args) => new R2().method('post', ...args);\n\nmodule.exports.head = (...args) => new R2().method('head', ...args);\n\nmodule.exports.patch = (...args) => new R2().method('patch', ...args);\n\nmodule.exports.delete = (...args) => new R2().method('delete', ...args);","map":{"version":3,"sources":["/Users/shengyisong/Documents/githubs/tezos-react-tutorial/client/node_modules/r2/index.js"],"names":["process","browser","global","fetch","require","Headers","caseless","toTypedArray","makeHeaders","obj","makeBody","value","Buffer","from","isBuffer","R2","constructor","args","opts","method","_headers","_caseless","failSet","Error","resolveResWith","way","resp","clone","ways","forEach","Object","defineProperty","get","response","then","set","_args","Promise","resolve","_request","url","shift","assign","headers","setHeaders","verb","toUpperCase","json","body","JSON","stringify","setHeader","key","o","module","exports","put","post","head","patch","delete"],"mappings":"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","sourcesContent":["/* globals fetch, Headers */\n/* istanbul ignore next */\nif (!process.browser) {\n  global.fetch = require('node-fetch')\n  global.Headers = global.fetch.Headers\n}\n\nconst caseless = require('caseless')\nconst toTypedArray = require('typedarray-to-buffer')\n\nconst makeHeaders = obj => new Headers(obj)\n\nconst makeBody = value => {\n  // TODO: Streams support.\n  if (typeof value === 'string') {\n    value = Buffer.from(value)\n  }\n  /* Can't test Blob types in Node.js */\n  /* istanbul ignore else */\n  if (Buffer.isBuffer(value)) {\n    value = toTypedArray(value)\n  }\n  return value\n}\n\nclass R2 {\n  constructor (...args) {\n    this.opts = { method: 'GET' }\n    this._headers = {}\n    this._caseless = caseless(this._headers)\n\n    let failSet = () => {\n      throw new Error('Cannot set read-only property.')\n    }\n    const resolveResWith = way => resp => resp.clone()[way]()\n\n    /* formData isn't implemented in the shim yet */\n    const ways = ['json', 'text', 'arrayBuffer', 'blob', 'formData']\n    ways.forEach(way =>\n      Object.defineProperty(this, way, {\n        get: () => this.response.then(resolveResWith(way)),\n        set: failSet\n      })\n    )\n    this._args(...args)\n\n    this.response = Promise.resolve().then(() => this._request())\n  }\n\n  _args (...args) {\n    let opts = this.opts\n    if (typeof args[0] === 'string') {\n      opts.url = args.shift()\n    }\n    if (typeof args[0] === 'object') {\n      opts = Object.assign(opts, args.shift())\n    }\n    if (opts.headers) this.setHeaders(opts.headers)\n    this.opts = opts\n  }\n\n  method (verb, ...args) {\n    this.opts.method = verb.toUpperCase()\n    this._args(...args)\n    return this\n  }\n  _request () {\n    let url = this.opts.url\n    delete this.opts.url\n\n    if (this.opts.json) {\n      this.opts.body = JSON.stringify(this.opts.json)\n      this.setHeader('content-type', 'application/json')\n      delete this.opts.json\n    }\n\n    if (this.opts.body) {\n      this.opts.body = makeBody(this.opts.body)\n    }\n\n    // TODO: formData API.\n\n    this.opts.headers = makeHeaders(this._headers)\n\n    return fetch(url, this.opts)\n  }\n  setHeaders (obj) {\n    for (let key in obj) {\n      this._caseless.set(key, obj[key])\n    }\n    return this\n  }\n  setHeader (key, value) {\n    let o = {}\n    o[key] = value\n    return this.setHeaders(o)\n  }\n}\n\nmodule.exports = (...args) => new R2(...args)\nmodule.exports.put = (...args) => new R2().method('put', ...args)\nmodule.exports.get = (...args) => new R2().method('get', ...args)\nmodule.exports.post = (...args) => new R2().method('post', ...args)\nmodule.exports.head = (...args) => new R2().method('head', ...args)\nmodule.exports.patch = (...args) => new R2().method('patch', ...args)\nmodule.exports.delete = (...args) => new R2().method('delete', ...args)\n"]},"metadata":{},"sourceType":"script"}