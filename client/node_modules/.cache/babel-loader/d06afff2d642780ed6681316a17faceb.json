{"ast":null,"code":"var _jsxFileName = \"/Users/shengyisong/Documents/githubs/tezos-react-tutorial/client/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Tezos } from \"@taquito/taquito\";\nimport { TezBridgeSigner } from \"@taquito/tezbridge-signer\";\nimport Menu from \"./Menu\";\nimport \"./App.css\";\nimport \"./bulma.css\";\n/* PUT HERE THE CONTRACT ADDRESS FOR YOUR OWN SANDBOX! */\n\nconst KT_ledger = \"KT1RigSYegqvkCkEoHMfgXY4XLgknZufrFEa\";\nconst KT_token = \"KT1GxBkvP5aiAtBu9MwAWBgxRpaCeLCcBfNj\";\n\nconst shortenAddress = addr => addr.slice(0, 6) + \"...\" + addr.slice(addr.length - 6);\n\nconst App = () => {\n  const [tokenInstance, setTokenInstance] = useState(undefined);\n  const [xtzPrice, setXtzPrice] = useState(undefined);\n  const [ledgerInstance, setLedgerInstance] = useState(undefined);\n  const [ledgerInfo, setLedgerInfo] = useState(undefined);\n  const [userAddress, setUserAddress] = useState(undefined);\n  const [balance, setBalance] = useState(undefined);\n  const [isOwner, setIsOwner] = useState(false);\n  const [contractBalance, setContractBalance] = useState(0);\n  const tezbridge = window.tezbridge;\n\n  const tezosPrice = async () => {\n    try {\n      const fetch = require('node-fetch');\n\n      const url = 'https://api-pub.bitfinex.com/v2/';\n      const pathParams = 'ticker/tXTZUSD'; // Change these based on relevant path params\n\n      const queryParams = ''; // Change these based on relevant query params\n\n      const req = await fetch(`${url}/${pathParams}?${queryParams}`);\n      const response = await req.json();\n\n      const _xtz = Number(response[0]);\n\n      alert(_xtz);\n      setXtzPrice(_xtz);\n    } catch (error) {\n      console.log(\"error fetching xtz price:\", error);\n    }\n  };\n\n  const initWallet = async () => {\n    try {\n      // sets rpc host\n\n      /*const rpc = await tezbridge.request({\n        method: \"set_host\",\n        host: \"http://localhost:8732\"\n      });*/\n      // gets user's address\n      const _address = await tezbridge.request({\n        method: \"get_source\"\n      });\n\n      setUserAddress(_address); // gets user's balance\n\n      const _balance = await Tezos.tz.getBalance(_address);\n\n      setBalance(_balance);\n      const storage = await tokenInstance.storage();\n\n      if (storage.owner === _address) {\n        setIsOwner(true);\n\n        const _contractBalance = await Tezos.tz.getBalance(KT_token);\n\n        setContractBalance(_contractBalance.c[0]);\n      }\n    } catch (error) {\n      console.log(\"error fetching the address or balance:\", error);\n    }\n  };\n\n  const mint = async (mintNumber, xtz) => {\n    // sends mint request\n    const price = mintNumber / 1000000 / xtz;\n    const op = await tokenInstance.methods.mint(mintNumber).send({\n      amount: price.toFixed(4)\n    }); // waits for confirmation\n\n    await op.confirmation(30); // if confirmed\n\n    if (op.includedInBlock !== Infinity) {\n      const newBalance = await Tezos.tz.getBalance(userAddress);\n      setBalance(newBalance);\n    } else {\n      console.log(\"error\");\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // sets RPC\n      Tezos.setProvider({\n        rpc: \"https://tezos-dev.cryptonomic-infra.tech\",\n        signer: new TezBridgeSigner()\n      }); // fetches contract storage\n\n      const tokenContract = await Tezos.contract.at(KT_token);\n      setTokenInstance(tokenContract);\n      const ledgerContract = await Tezos.contract.at(KT_ledger);\n      setLedgerInstance(ledgerContract);\n      const ledgerStorage = await ledgerContract.storage(); // creates token contract info\n\n      let ledgerInfos = [ledgerStorage.debtor, ledgerStorage.totalCredit];\n      setLedgerInfo(ledgerInfos);\n    })();\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"wallet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, balance === undefined ? React.createElement(\"button\", {\n    className: \"button is-info is-light is-small\",\n    onClick: initWallet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Connect your wallet\") : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: \"balance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"\\uA729 \", balance.toNumber() / 1000000), React.createElement(\"div\", {\n    className: \"field is-grouped\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"button is-success is-light is-small\",\n    onClick: async () => {\n      setUserAddress(undefined);\n      setBalance(undefined);\n      setIsOwner(undefined);\n      await initWallet();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, shortenAddress(userAddress))), isOwner && React.createElement(\"p\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"button is-warning is-light is-small\",\n    onClick: async () => {\n      setXtzPrice(undefined);\n      await tezosPrice();\n      alert(xtzPrice);\n      mint(document.getElementById(\"tokenNumber\").value, xtzPrice);\n      document.getElementById(\"tokenNumber\").value = \"\"; // get xtz price\n      //if (typeof xtzPrice !== 'undefined') {\n      //  mint(document.getElementById(\"tokenNumber\").value,xtzPrice);\n      //  document.getElementById(\"tokenNumber\").value = \"\";\n      //} else {\n      //  setTimeout(1000)\n      //} \n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Mint token\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"tokenNumber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }))))), React.createElement(\"div\", {\n    className: \"app-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Flexible Loans\"), React.createElement(\"div\", {\n    className: \"logo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: \"coffee-maker.png\",\n    alt: \"logo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  })), typeof ledgerInfo === 'undefined' ? \"Loading the ledger info...\" : React.createElement(Menu, {\n    ledgerInfo: ledgerInfo,\n    tokenInstance: tokenInstance,\n    ledgerInstance: ledgerInstance,\n    userAddress: userAddress //xtzPrice={xtzPrice}\n    ,\n    setBalance: setBalance,\n    Tezos: Tezos,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/shengyisong/Documents/githubs/tezos-react-tutorial/client/src/App.js"],"names":["React","useState","useEffect","Tezos","TezBridgeSigner","Menu","KT_ledger","KT_token","shortenAddress","addr","slice","length","App","tokenInstance","setTokenInstance","undefined","xtzPrice","setXtzPrice","ledgerInstance","setLedgerInstance","ledgerInfo","setLedgerInfo","userAddress","setUserAddress","balance","setBalance","isOwner","setIsOwner","contractBalance","setContractBalance","tezbridge","window","tezosPrice","fetch","require","url","pathParams","queryParams","req","response","json","_xtz","Number","alert","error","console","log","initWallet","_address","request","method","_balance","tz","getBalance","storage","owner","_contractBalance","c","mint","mintNumber","xtz","price","op","methods","send","amount","toFixed","confirmation","includedInBlock","Infinity","newBalance","setProvider","rpc","signer","tokenContract","contract","at","ledgerContract","ledgerStorage","ledgerInfos","debtor","totalCredit","toNumber","document","getElementById","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Tezos } from \"@taquito/taquito\";\nimport { TezBridgeSigner } from \"@taquito/tezbridge-signer\";\nimport Menu from \"./Menu\";\nimport \"./App.css\";\nimport \"./bulma.css\";\n\n\n/* PUT HERE THE CONTRACT ADDRESS FOR YOUR OWN SANDBOX! */\nconst KT_ledger = \"KT1RigSYegqvkCkEoHMfgXY4XLgknZufrFEa\"\nconst KT_token = \"KT1GxBkvP5aiAtBu9MwAWBgxRpaCeLCcBfNj\"\n\n\nconst shortenAddress = addr =>\n  addr.slice(0, 6) + \"...\" + addr.slice(addr.length - 6);\n\n  \nconst App = () => {\n  const [tokenInstance, setTokenInstance] = useState(undefined);\n  const [xtzPrice, setXtzPrice] = useState(undefined);\n  const [ledgerInstance, setLedgerInstance] = useState(undefined);\n  const [ledgerInfo, setLedgerInfo] = useState(undefined);\n  const [userAddress, setUserAddress] = useState(undefined);\n  const [balance, setBalance] = useState(undefined);\n  const [isOwner, setIsOwner] = useState(false);\n  const [contractBalance, setContractBalance] = useState(0);\n  const tezbridge = window.tezbridge;\n\n  const tezosPrice = async () => {\n    try {\n      const fetch = require('node-fetch') \n      const url = 'https://api-pub.bitfinex.com/v2/'\n      const pathParams = 'ticker/tXTZUSD' // Change these based on relevant path params\n      const queryParams = '' // Change these based on relevant query params\n      const req = await fetch(`${url}/${pathParams}?${queryParams}`)\n      const response = await req.json()               \n      const _xtz = Number(response[0])\n      alert(_xtz)\n      setXtzPrice(_xtz);\n    } catch (error) {\n      console.log(\"error fetching xtz price:\", error);\n    }\n\n  }\n\n  const initWallet = async () => {\n    try {\n      // sets rpc host\n      /*const rpc = await tezbridge.request({\n        method: \"set_host\",\n        host: \"http://localhost:8732\"\n      });*/\n      // gets user's address\n      const _address = await tezbridge.request({ method: \"get_source\" });\n      setUserAddress(_address);\n      // gets user's balance\n      const _balance = await Tezos.tz.getBalance(_address);\n      setBalance(_balance);\n      const storage = await tokenInstance.storage();\n      if (storage.owner === _address) {\n        setIsOwner(true);\n        const _contractBalance = await Tezos.tz.getBalance(KT_token);\n        setContractBalance(_contractBalance.c[0]);\n      }\n    } catch (error) {\n      console.log(\"error fetching the address or balance:\", error);\n    }\n  };\n  const mint = async (mintNumber,xtz) => {\n    // sends mint request\n    const price = mintNumber / 1000000 / xtz;\n    const op = await tokenInstance.methods.mint(mintNumber).send({ amount: price.toFixed(4) });\n    // waits for confirmation\n    await op.confirmation(30);\n    // if confirmed\n    if (op.includedInBlock !== Infinity) {\n      const newBalance = await Tezos.tz.getBalance(userAddress);\n      setBalance(newBalance);\n    } else {\n      console.log(\"error\");\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      // sets RPC\n      Tezos.setProvider({\n        rpc: \"https://tezos-dev.cryptonomic-infra.tech\",\n        signer: new TezBridgeSigner()\n      });\n      // fetches contract storage\n      const tokenContract = await Tezos.contract.at(KT_token);\n      setTokenInstance(tokenContract);\n      const ledgerContract = await Tezos.contract.at(KT_ledger);\n      setLedgerInstance(ledgerContract);\n      const ledgerStorage = await ledgerContract.storage();\n      // creates token contract info\n      let ledgerInfos = [ledgerStorage.debtor,ledgerStorage.totalCredit];\n      setLedgerInfo(ledgerInfos);\n    })();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div className=\"wallet\">\n        {balance === undefined ? (\n          <button\n            className=\"button is-info is-light is-small\"\n            onClick={initWallet}\n          >\n            Connect your wallet\n          </button>\n        ) : (\n          <>\n            <span className=\"balance\">ꜩ {balance.toNumber() / 1000000}</span>\n            <div className=\"field is-grouped\">\n              <p className=\"control\">\n                <button\n                  className=\"button is-success is-light is-small\"\n                  onClick={async () => {\n                    setUserAddress(undefined);\n                    setBalance(undefined);\n                    setIsOwner(undefined);\n                    await initWallet();\n                  }}\n                >\n                  {shortenAddress(userAddress)}\n                </button>\n              </p>\n              {isOwner && (\n                <p className=\"control\">\n                  <button\n                    className=\"button is-warning is-light is-small\"\n                    onClick={async () => {\n                     setXtzPrice(undefined);\n                     await tezosPrice();\n                     alert (xtzPrice)\n                     mint(document.getElementById(\"tokenNumber\").value,xtzPrice);\n                     document.getElementById(\"tokenNumber\").value = \"\";\n\n                     // get xtz price\n                     //if (typeof xtzPrice !== 'undefined') {\n                     //  mint(document.getElementById(\"tokenNumber\").value,xtzPrice);\n                     //  document.getElementById(\"tokenNumber\").value = \"\";\n                     //} else {\n                     //  setTimeout(1000)\n                     //} \n                    }\n                    }\n                  >\n                    Mint token\n                  </button>\n                  <input type=\"text\" id=\"tokenNumber\"></input>\n                </p>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n      <div className=\"app-title\">Flexible Loans</div>\n      <div className=\"logo\">\n        <img src=\"coffee-maker.png\" alt=\"logo\" />\n      </div>\n      {typeof ledgerInfo === 'undefined' ? (\n        \"Loading the ledger info...\"\n      ) : (\n        <Menu\n          ledgerInfo={ledgerInfo}\n          tokenInstance={tokenInstance}\n          ledgerInstance={ledgerInstance}\n          userAddress={userAddress}\n          //xtzPrice={xtzPrice}\n          setBalance={setBalance}\n          Tezos={Tezos}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}