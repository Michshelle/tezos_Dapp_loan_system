{"ast":null,"code":"var _jsxFileName = \"/Users/shengyisong/Documents/githubs/tezos-react-tutorial/client/src/Menu.js\";\nimport React, { useState } from \"react\";\n\nconst upperFirst = str => str[0].toUpperCase() + str.slice(1);\n\nconst mutezToTez = mutez => Math.round((parseInt(mutez) / 1000000 + Number.EPSILON) * 100) / 100;\n\nconst Menu = ({\n  tokenInstance,\n  ledgerInstance,\n  ledgerInfo,\n  userAddress,\n  setBalance,\n  Tezos\n}) => {\n  const [txStatus, setTxStatus] = useState(null);\n  const [txHash, setTxHash] = useState(undefined);\n\n  const burn = async userAddress => {\n    try {\n      const op = await tokenInstance.methods.burn(userAddress);\n      console.log(op);\n\n      if (op.status === \"applied\") {\n        setTxStatus(\"applied\");\n        setTxHash(op.hash);\n      } else {\n        setTxStatus(\"error\");\n        throw Error(\"Transation not applied\");\n      }\n\n      await op.confirmation(30);\n\n      if (op.includedInBlock !== Infinity) {\n        setTxStatus(\"included\");\n        const newBalance = await Tezos.tz.getBalance(userAddress);\n        setBalance(newBalance);\n      } else {\n        throw Error(\"Transation not included in block\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (txStatus === null) {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"app-subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Choose the action you want to perform:\"), React.createElement(\"div\", {\n      className: \"card coffee_selection\",\n      key: userAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"card-footer-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"action\",\n      onClick: () => burn(userAddress),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Burn\")))));\n  } else if (txStatus === \"applied\") {\n    return React.createElement(\"div\", {\n      className: \"message is-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"message-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Waiting for confirmation\")), React.createElement(\"div\", {\n      className: \"message-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Your transaction is being processed, please wait.\"), React.createElement(\"p\", {\n      className: \"coffee-loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"coffee-cup.png\",\n      alt: \"coffee-cup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Transaction number: \", txHash)));\n  } else if (txStatus === \"included\") {\n    return React.createElement(\"div\", {\n      className: \"message is-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"message-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Transaction confirmed!\")), React.createElement(\"div\", {\n      className: \"message-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Xtz has been sent to your account\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button is-info\",\n      onClick: () => setTxStatus(null),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Xtz redeem\"))));\n  } else if (txStatus === \"error\") {\n    return React.createElement(\"div\", {\n      className: \"message is-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"message-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Error\")), React.createElement(\"div\", {\n      className: \"message-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"An error has occurred, please try again.\")));\n  }\n};\n\nexport default Menu;","map":{"version":3,"sources":["/Users/shengyisong/Documents/githubs/tezos-react-tutorial/client/src/Menu.js"],"names":["React","useState","upperFirst","str","toUpperCase","slice","mutezToTez","mutez","Math","round","parseInt","Number","EPSILON","Menu","tokenInstance","ledgerInstance","ledgerInfo","userAddress","setBalance","Tezos","txStatus","setTxStatus","txHash","setTxHash","undefined","burn","op","methods","console","log","status","hash","Error","confirmation","includedInBlock","Infinity","newBalance","tz","getBalance","error"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst upperFirst = str => str[0].toUpperCase() + str.slice(1);\n\nconst mutezToTez = mutez =>\n  Math.round((parseInt(mutez) / 1000000 + Number.EPSILON) * 100) / 100;\n\nconst Menu = ({\n  tokenInstance,\n  ledgerInstance,\n  ledgerInfo,\n  userAddress,\n  setBalance,\n  Tezos\n}) => {\n  const [txStatus, setTxStatus] = useState(null);\n  const [txHash, setTxHash] = useState(undefined);\n\n  const burn = async (userAddress) => {\n    try {\n      const op = await tokenInstance.methods\n        .burn(userAddress)\n      console.log(op);\n      if (op.status === \"applied\") {\n        setTxStatus(\"applied\");\n        setTxHash(op.hash);\n      } else {\n        setTxStatus(\"error\");\n        throw Error(\"Transation not applied\");\n      }\n\n      await op.confirmation(30);\n      if (op.includedInBlock !== Infinity) {\n        setTxStatus(\"included\");\n        const newBalance = await Tezos.tz.getBalance(userAddress);\n        setBalance(newBalance);\n      } else {\n        throw Error(\"Transation not included in block\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (txStatus === null) {\n\n    return (\n      <>\n        <div className=\"app-subtitle\">Choose the action you want to perform:</div>\n          <div className=\"card coffee_selection\" key={userAddress}>\n              <div className=\"card-footer\">\n                <p className=\"card-footer-item\">\n                  <span\n                    className=\"action\"\n                    onClick={() => burn(userAddress)}\n                  >\n                    Burn\n                  </span>\n                </p>\n              </div>\n          </div>\n      </>\n    );\n  } else if (txStatus === \"applied\") {\n    return (\n      <div className=\"message is-info\">\n        <div className=\"message-header\">\n          <p>Waiting for confirmation</p>\n        </div>\n        <div className=\"message-body\">\n          <p>Your transaction is being processed, please wait.</p>\n          <p className=\"coffee-loader\">\n            <img src=\"coffee-cup.png\" alt=\"coffee-cup\" />\n          </p>\n          <p>Transaction number: {txHash}</p>\n        </div>\n      </div>\n    );\n  } else if (txStatus === \"included\") {\n    return (\n      <div className=\"message is-success\">\n        <div className=\"message-header\">\n          <p>Transaction confirmed!</p>\n        </div>\n        <div className=\"message-body\">\n          <p>Xtz has been sent to your account</p>\n          <br />\n          <p>\n            <button\n              className=\"button is-info\"\n              onClick={() => setTxStatus(null)}\n            >\n              Xtz redeem\n            </button>\n          </p>\n        </div>\n      </div>\n    );\n  } else if (txStatus === \"error\") {\n    return (\n      <div className=\"message is-danger\">\n        <div className=\"message-header\">\n          <p>Error</p>\n        </div>\n        <div className=\"message-body\">\n          <p>An error has occurred, please try again.</p>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Menu;\n"]},"metadata":{},"sourceType":"module"}